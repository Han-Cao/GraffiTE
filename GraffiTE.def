Bootstrap: library
From: ubuntu:20.04

#%files
#    repmask_vcf.sh /usr/local/bin
#    fix_vcf.py /usr/local/bin
#    annotate_vcf.R /usr/local/bin
#    one_code_to_find_them_all.pl /usr/local/bin
#    build_dictionary.pl /usr/local/bin
#    findTSD.sh /usr/local/bin
#    TSD_Match.sh /usr/local/bin
%post
    apt-get -y update
    apt-get install --assume-yes software-properties-common
    add-apt-repository universe
    apt-get update
    apt-get install --assume-yes python3-pip git build-essential zlib1g-dev libcereal-dev libjellyfish-2.0-dev pkg-config cmake r-base-core gawk autoconf

    apt-get -y install \
    libssl-dev \
    libxml2-dev \
    libcurl4-openssl-dev \
    curl libgomp1 \
    perl \
    python3-h5py \
    libfile-which-perl \
    libtext-soundex-perl \
    libjson-perl liburi-perl libwww-perl \
    libdevel-size-perl \
    bedtools \
    ncbi-blast+

    apt-get install --assume-yes tabix libbz2-dev liblzma-dev libgsl-dev libperl-dev 

    git clone https://github.com/Dfam-consortium/TETools.git
    bash TETools/getsrc.sh
    mv src /opt/src
    cp TETools/sha256sums.txt /opt/src/
    mkdir -p /opt/ucsc_tools
    cp TETools/LICENSE.ucsc /opt/ucsc_tools/LICENSE

    cd /opt/src

    #sha256sum -c sha256sums.txt

    # Extract RMBlast
    cd /opt \
    && mkdir rmblast \
    && tar --strip-components=1 -x -f src/rmblast-*-x64-linux.tar.gz -C rmblast \
    && rm src/rmblast-*-x64-linux.tar.gz

    # Compile HMMER
    cd /opt
    tar -x -f src/hmmer-*.tar.gz \
    && cd hmmer-* \
    && ./configure --prefix=/opt/hmmer && make && make install \
    && make clean \
    && cd .. && rm src/hmmer-*.tar.gz

    # Compile TRF
    cd /opt
    tar -x -f src/trf-*.tar.gz \
    && cd TRF-* \
    && mkdir build && cd build \
    && ../configure && make && cp ./src/trf /opt/trf \
    && cd .. && rm -r build \
    && cd .. && rm src/trf-*.tar.gz

    # Compile RepeatScout
    cd /opt
    tar -x -f src/RepeatScout-*.tar.gz \
    && cd RepeatScout-* \
    && sed -i 's#^INSTDIR =.*#INSTDIR = /opt/RepeatScout#' Makefile \
    && make && make install \
    && cd .. && rm src/RepeatScout-*.tar.gz 

    # Compile and configure RECON
    cd /opt
    tar -x -f src/RECON-*.tar.gz \
    && mv RECON-* RECON \
    && cd RECON \
    && make -C src && make -C src install \
    && cp 00README bin/ \
    && sed -i 's#^\$path =.*#$path = "/opt/RECON/bin";#' scripts/recon.pl \
    && cd .. && rm src/RECON-*.tar.gz

    # Compile cd-hit
    cd /opt/src
    tar -x -f cd-hit-v*.tar.gz \
    && cd cd-hit-v* \
    && make && mkdir /opt/cd-hit && PREFIX=/opt/cd-hit make install \
    && cd .. && rm cd-hit-v*.tar.gz

    # Compile genometools (for ltrharvest)
    cd /opt/src
    tar -x -f gt-*.tar.gz \
    && cd genometools-* \
    && make -j4 cairo=no && make cairo=no prefix=/opt/genometools install \
    && make cleanup && cd .. && rm gt-*.tar.gz

    # Configure LTR_retriever
    cd /opt \
    && tar -x -f src/LTR_retriever-*.tar.gz \
    && mv LTR_retriever-* LTR_retriever \
    && cd LTR_retriever \
    && sed -i \
    -e 's#BLAST+=#BLAST+=/opt/rmblast/bin#' \
            -e 's#RepeatMasker=#RepeatMasker=/opt/RepeatMasker#' \
            -e 's#HMMER=#HMMER=/opt/hmmer/bin#' \
            -e 's#CDHIT=#CDHIT=/opt/cd-hit#' \
            paths && cd .. && rm src/LTR_retriever-*.tar.gz

    # Compile MAFFT
    cd /opt/src
    tar -x -f mafft-*-without-extensions-src.tgz \
    && cd mafft-*-without-extensions/core \
    && sed -i 's#^PREFIX =.*#PREFIX = /opt/mafft#' Makefile \
    && make clean && make && make install \
    && make clean && cd ../.. && rm mafft-*-without-extensions-src.tgz

    # Compile NINJA
    cd /opt \
    && mkdir NINJA \
    && tar --strip-components=1 -x -f src/NINJA-cluster.tar.gz -C NINJA \
    && cd NINJA/NINJA \
    && make clean && make all

    # Move UCSC tools
    cd /opt/src
    mkdir /opt/ucsc_tools \
    && mv faToTwoBit twoBitInfo twoBitToFa  /opt/ucsc_tools \
    && chmod +x /opt/ucsc_tools/*

    # Compile and configure coseg
    cd /opt \
    && tar -x -f src/coseg-*.tar.gz \
    && cd coseg \
    && sed -i 's/-o coseg/-o coseg -lm/g' Makefile \
    && sed -i 's@#!.*perl@#!/usr/bin/perl@' preprocessAlignments.pl runcoseg.pl refineConsSeqs.pl \
        && sed -i 's#use lib "/usr/local/RepeatMasker";#use lib "/opt/RepeatMasker";#' preprocessAlignments.pl \
        && make && cd .. && rm src/coseg-*.tar.gz

    # Configure RepeatMasker
    cd /opt \
    && tar -x -f src/RepeatMasker-*.tar.gz \
    && chmod a+w RepeatMasker/Libraries \
    && chmod a+w RepeatMasker/Libraries/famdb \
    && gunzip src/dfam38_full.0.h5.gz \
    && mv src/dfam38_full.0.h5 /opt/RepeatMasker/Libraries/famdb/dfam38_full.0.h5 \
    && cd RepeatMasker \
    && perl configure \
    -hmmer_dir=/opt/hmmer/bin \
    -rmblast_dir=/opt/rmblast/bin \
    -libdir=/opt/RepeatMasker/Libraries \
    -trf_prgm=/opt/trf \
    -default_search_engine=rmblast \
    && cd .. && rm src/RepeatMasker-*.tar.gz

    # Configure RepeatModeler
    cd /opt \
    && tar -x -f src/RepeatModeler-*.tar.gz \
    && mv RepeatModeler-* RepeatModeler \
    && cd RepeatModeler \
    && perl configure \
    -cdhit_dir=/opt/cd-hit -genometools_dir=/opt/genometools/bin \
    -ltr_retriever_dir=/opt/LTR_retriever -mafft_dir=/opt/mafft/bin \
    -ninja_dir=/opt/NINJA/NINJA -recon_dir=/opt/RECON/bin \
    -repeatmasker_dir=/opt/RepeatMasker \
    -rmblast_dir=/opt/rmblast/bin -rscout_dir=/opt/RepeatScout \
    -trf_dir=/opt \
    -ucsctools_dir=/opt/ucsc_tools && cd .. && rm src/RepeatModeler-*.tar.gz


    git clone --recursive https://github.com/samtools/htslib.git
    cd htslib
    autoreconf -i
    ./configure
    make
    make install
    cd ${HOME}

    git clone https://github.com/samtools/samtools.git
    cd samtools
    autoheader
    autoconf -Wno-syntax
    ./configure --without-curses
    make
    make install
    cd ${HOME}
    rm -rf samtools

    git clone https://github.com/samtools/bcftools.git
    cd bcftools
    autoheader
    autoconf
    ./configure --enable-libgsl --enable-perl-filters
    make
    make install

    cd ${HOME}
    rm -rf htslib
    rm -rf bcftools

    git clone https://github.com/fritzsedlazeck/SURVIVOR.git
    cd SURVIVOR/Debug
    make
    cp SURVIVOR /usr/local/bin
    cd $HOME
    rm -rf SURVIVOR

    git clone https://github.com/lh3/minimap2
    cd minimap2
    make
    cp minimap2 /usr/local/bin
    cd $HOME
    rm -rf minimap2

    mkdir /metadata
    echo `dpkg -l | grep jellyfish | tr -s " " | cut -d " " -f 2,3` > /metadata/jellyfish.lib.version
    mkdir /repos
    cd /repos
    git clone https://github.com/eblerjana/pangenie.git
    cd pangenie
    mkdir build
    cd build
    # cmake -DCOMPILATION_ARCH=OFF .. 
    cmake ..
    make -j 4
    cp src/PanGenie /usr/local/bin
    cd ..
    echo `git rev-parse --short HEAD` > /metadata/pangenie.git.version
    cd ${HOME}

    pip3 install numpy==1.21
    pip3 install pysam pyparsing svim-asm pandas vcfpy sniffles
    # pip3 install --upgrade numpy

    R --slave -e 'install.packages(c("XML", "dplyr", "stringr", "tidyr", "readr", "vcfR", "optparse"), repos="https://cloud.r-project.org/")'


    cd $HOME
    # Install dependencies and some basic utilities
    apt-get -y update \
    && apt-get -y install \
    aptitude \
    libgomp1 \
    perl \
    python3-h5py \
    libfile-which-perl \
    libtext-soundex-perl \
    libjson-perl liburi-perl libwww-perl \
    libdevel-size-perl \
    && aptitude install -y ~pstandard ~prequired \
    curl wget \
    vim nano \
    procps strace \
    libpam-systemd-

    echo "PS1='(dfam-tetools \$(pwd))\\\$ '" >> /etc/bash.bashrc
    LANG=C
    PYTHONIOENCODING=utf8
    PATH=/opt/RepeatMasker:/opt/RepeatMasker/util:/opt/RepeatModeler:/opt/RepeatModeler/util:/opt/coseg:/opt/ucsc_tools:/opt:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    apt-get -y install bc
    apt-get remove --assume-yes git software-properties-common cmake make pkg-config build-essential autoconf
    apt-get autoremove --assume-yes
    apt-get clean --assume-yes

    wget -O /usr/local/bin/vg https://github.com/vgteam/vg/releases/download/v1.45.0/vg
    chmod +x /usr/local/bin/vg

    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
    bash ~/miniconda.sh -b -p $HOME/miniconda
    rm -f ~/miniconda.sh
    ${HOME}/miniconda/bin/conda install -y -c bioconda graphaligner
    cp ${HOME}/miniconda/bin/GraphAligner /usr/local/bin/
    rm -rf ~/miniconda

%environment
    export LC_ALL=C
    export LANG=C
    export PYTHONIOENCODING=utf8
    export PATH=/opt/RepeatMasker:/opt/RepeatMasker/util:/opt/RepeatModeler:/opt/RepeatModeler/util:/opt/coseg:/opt/ucsc_tools:/opt:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
